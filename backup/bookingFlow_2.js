const { getUserState, setUserState, clearUserState } = require('./userStateHandler');
const { validateProvince } = require('./validateProvince');
const { saveBookingData } = require('./apiService');
const { isValidDateFormat } = require('./validateDate');
const { handleQuickReply } = require('./quickReply');

async function handleBookingStep(event, client) {
    console.log('Handling booking step...');
    const userId = event.source.userId;
    const userMessage = event.message.text;
    let state = getUserState(userId) || {};

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå 'üöó' ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡πÉ‡∏ô state
    if (userMessage === 'üöó' && !state.step) {
        state = { step: 'startDate' };
        setUserState(userId, state);
        console.log('Starting booking process...');
        await client.replyMessage(event.replyToken, {
            type: 'text',
            text: 'üìÖ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á (DD/MM/YYYY)'
        });
        return;
    }

    switch (state.step) {
        case 'startDate':
            console.log('Handling start date...');
            if (!isValidDateFormat(userMessage)) {
                await client.replyMessage(event.replyToken, {
                    type: 'text',
                    text: '‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÉ‡∏´‡∏°‡πà'
                });
                return;
            }
            state.startDate = userMessage;
            state.step = 'endDate';
            console.log('Updating state:', state);
            setUserState(userId, state);
            await client.replyMessage(event.replyToken, {
                type: 'text',
                text: 'üìÖ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏•‡∏±‡∏ö (DD/MM/YYYY)'
            });
            break;

        case 'endDate':
            console.log('Handling end date...');
            if (!isValidDateFormat(userMessage)) {
                await client.replyMessage(event.replyToken, {
                    type: 'text',
                    text: '‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÉ‡∏´‡∏°‡πà'
                });
                return;
            }
            state.endDate = userMessage;
            state.step = 'province';
            console.log('Updating state:', state);
            setUserState(userId, state);
            await client.replyMessage(event.replyToken, {
                type: 'text',
                text: 'üìç ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á'
            });
            break;

        case 'province':
            console.log('Handling province...');
            {
                const quickMsg = await handleQuickReply("confirmProvince");
                console.log('state step :', state.step);

                if (state.step === 'confirmProvince' && userMessage === '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç') {
                    state.step = 'province';
                    setUserState(userId, state);

                    await client.replyMessage(event.replyToken, {
                        type: 'text',
                        text: 'üìç ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£'
                    });

                    return;
                }

                const validationResult = await validateProvince(userMessage);
                console.log('Validation result:', validationResult);

                if (state.step === 'confirmProvince' && userMessage === '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î' && state.suggestedProvince) {
                    state.correctedProvince = state.suggestedProvince;
                    state.step = 'confirmProvince';
                    setUserState(userId, state);

                    await client.replyMessage(event.replyToken, {
                        type: 'text',
                        text: [
                            "‚úÖ ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠",
                            `‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î "${state.correctedProvince}" ?`,
                            '‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà'
                        ].join("\n"),
                        quickReply: quickMsg.quickReply
                    });

                    return;
                }

                if (!validationResult.valid) {
                    state.suggestedProvince = validationResult.suggestion;
                    state.step = 'confirmProvince';
                    setUserState(userId, state);

                    await client.replyMessage(event.replyToken, {
                        type: 'text',
                        text: [
                            "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢",
                            `‡∏ó‡πà‡∏≤‡∏ô‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á "${validationResult.suggestion}" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`,
                            '‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà'
                        ].join("\n"),
                        quickReply: quickMsg.quickReply
                    });

                    return;
                }

                state.correctedProvince = validationResult.province;
                state.step = 'confirmProvince';
                setUserState(userId, state);

                await client.replyMessage(event.replyToken, {
                    type: 'text',
                    text: [
                        "‚úÖ ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠",
                        `‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î "${state.correctedProvince}" ?`,
                        '‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà'
                    ].join("\n"),
                    quickReply: quickMsg.quickReply
                });
            }
            break;


        case 'confirmProvince':
            console.log('Handling confirm province...');
            const quickMsg = await handleQuickReply("confirmBooking");

            if (userMessage === '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î') {
                if (!state.correctedProvince) {
                    state.correctedProvince = state.suggestedProvince || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
                }

                state.destination = state.correctedProvince;
                state.step = 'confirm'; // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô confirm
                console.log('‚úÖ Updating state:', state);
                setUserState(userId, state);

                await client.replyMessage(event.replyToken, {
                    type: 'text',
                    text: [
                        "üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á:",
                        `- ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${state.startDate} - ${state.endDate}`,
                        `- ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î: ${state.destination}`,
                        '‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ‡∏´‡∏£‡∏∑‡∏≠ "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á'
                    ].join("\n"),
                    quickReply: quickMsg.quickReply
                });

                return;
            }

            if (userMessage === '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç') {
                state.step = 'province';
                setUserState(userId, state);

                await client.replyMessage(event.replyToken, {
                    type: 'text',
                    text: 'üìç ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà'
                });

                return;
            }

            await client.replyMessage(event.replyToken, {
                type: 'text',
                text: '‚ùå ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô" ‡∏´‡∏£‡∏∑‡∏≠ "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"'
            });

            break;

        case 'confirm':
            console.log('Handling confirm...');
            console.log('Received userMessage:', userMessage);
            console.log('Current state:', state);

            if (userMessage === '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô') {
                console.log('‚û°Ô∏è Sending booking data to API:', {
                    userId,
                    startDate: state.startDate,
                    endDate: state.endDate,
                    destination: state.destination
                });

                const result = await saveBookingData(userId, state);

                if (result.success) {
                    clearUserState(userId);
                    await client.replyMessage(event.replyToken, {
                        type: 'text',
                        text: '‚úÖ ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'
                    });
                } else {
                    await client.replyMessage(event.replyToken, {
                        type: 'text',
                        text: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà'
                    });
                }
            } else if (userMessage === '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å') {
                clearUserState(userId);
                await client.replyMessage(event.replyToken, {
                    type: 'text',
                    text: 'üö´ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á'
                });
            } else {
                await client.replyMessage(event.replyToken, {
                    type: 'text',
                    text: '‚ùå ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"'
                });
            }
            break;

        default:
            await client.replyMessage(event.replyToken, {
                type: 'text',
                text: '‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà'
            });
    }
}

module.exports = { handleBookingStep };
