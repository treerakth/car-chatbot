const { getUserState, setUserState, clearUserState } = require('./userStateHandler');
const { validateProvince } = require('./validateProvince');
const { saveBookingData } = require('./apiService');
const { isValidDateFormat, convertThaiDateToGregorian } = require('./validateDate');
const { handleQuickReply } = require('./quickReply');
const { handleFlexMessage } = require('./flexMessageUtils');
const { fetchCarAvailable } = require('./carService');

async function handleBookingStep(event, client) {
    console.log('Handling booking step (new flow)...');

    const userMessage = event.message?.text?.trim() || '';
    const postbackData = event.postback?.data || '';
    const userId = event.source.userId;

    let state = getUserState(userId) || {};
    console.log('üìå Current state:', state);

    if (userMessage === 'üöó' && !state.step) {
        console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏£‡∏ñ...');

        state = { step: 'carType' };
        await setUserState(userId, state);

        console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state:', getUserState(userId));

        await handleFlexMessage(client, event, 'fetchCarData.json');
        return;
    }

    console.log('User message:', userMessage);
    console.log('Postback data:', postbackData);
    console.log('üîÑ Current state (After Processing):', state);

    switch (state.step) {
        case 'carType': {
            console.log('Handling carType...');
            if (postbackData.includes('carType=')) {
                const params = new URLSearchParams(postbackData);
                const chosenCarType = params.get('carType');
                console.log('Chosen car type:', chosenCarType);
                console.log('params:', params);
                if (chosenCarType) {
                    state.carType = chosenCarType;
                    state.step = 'carBrand';
                    await setUserState(userId, state);

                    console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state:', getUserState(userId));

                    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å fetchCarAvailable ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏ñ‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á
                    const carFlexMessage = await fetchCarAvailable(chosenCarType);
                    await client.replyMessage(event.replyToken, carFlexMessage);
                    return;
                } else {
                    await client.replyMessage(event.replyToken, {
                        type: 'text',
                        text: '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏ñ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà'
                    });
                    return;
                }
            } else {
                await handleFlexMessage(client, event, 'fetchCarData.json');
                return;
            }
        }

        /*****************************************************
         * 2) ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∏‡πà‡∏ô‡∏£‡∏ñ (carBrand)
         *****************************************************/
        case 'carBrand': {
            console.log('Handling carBrand...');
            if (postbackData.includes('carBrand=')) {
                const params = new URLSearchParams(postbackData);
                const chosencarBrand = params.get('carBrand');

                if (chosencarBrand) {
                    state.carBrand = chosencarBrand;
                    state.step = 'name';
                    setUserState(userId, state);

                    await client.replyMessage(event.replyToken, {
                        type: 'text',
                        text: 'üë§ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• (‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ)'
                    });
                    return;
                } else {
                    await client.replyMessage(event.replyToken, {
                        type: 'text',
                        text: '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏ñ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà'
                    });
                    return;
                }
            } else {
                await client.replyMessage(event.replyToken, {
                    type: 'text',
                    text: '‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏ñ‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
                });
                return;
            }
        }

        /*****************************************************
         * 3) ‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠ (name)
         *****************************************************/
        case 'name': {
            console.log('Handling get name...');
            const parts = userMessage.split(' ');
            if (parts.length < 2) {
                await client.replyMessage(event.replyToken, {
                    type: 'text',
                    text: '‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ó‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•'
                });
                return;
            }
            state.firstName = parts[0];
            state.lastName = parts.slice(1).join(' ');
            state.step = 'phone';
            setUserState(userId, state);
            await client.replyMessage(event.replyToken, {
                type: 'text',
                text: 'üìû ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå (10 ‡∏´‡∏•‡∏±‡∏Å)'
            });
            break;
        }
        /*****************************************************
         * ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô: ‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ (phone)
         *****************************************************/
        case 'phone': {
            console.log('Handling get phone...');
            const phonePattern = /^\d{10}$/;
            if (!phonePattern.test(userMessage)) {
                await client.replyMessage(event.replyToken, {
                    type: 'text',
                    text: '‚ùå ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö 10 ‡∏´‡∏•‡∏±‡∏Å'
                });
                return;
            }
            state.phoneNumber = userMessage;
            state.step = 'startDate';
            setUserState(userId, state);
            startDate_format = [
                'üìÖ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô‡∏£‡∏ñ',
                '(‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)',
                '‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (20/03/2568)'
            ].join("\n");
            await client.replyMessage(event.replyToken, {
                type: 'text',
                text: startDate_format

            });
            break;
        }

        /*****************************************************
         * ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô: ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (startDate)
         *****************************************************/
        case 'startDate': {
            console.log('Handling start date...');
            if (!isValidDateFormat(userMessage)) {
                const false_format = [
                    "‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
                    '‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏î‡πâ',
                    '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö DD/MM/YYYY'
                ].join("\n");
                await client.replyMessage(event.replyToken, {
                    type: 'text',
                    text: false_format
                });
                return;
            }
            state.startDate = userMessage;
            state.step = 'endDate';
            setUserState(userId, state);
            const endDate_format = [
                'üìÖ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô‡∏£‡∏ñ',
                '(‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô)',
                '‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (20/03/2568)'
            ].join("\n");
            await client.replyMessage(event.replyToken, {
                type: 'text',
                text: endDate_format
            });
            break;
        }

        /*****************************************************
         * ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô: ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô‡∏£‡∏ñ (endDate)
         *****************************************************/
        case 'endDate': {
            console.log('Handling end date...');
            if (!isValidDateFormat(userMessage)) {
                await client.replyMessage(event.replyToken, {
                    type: 'text',
                    text: '‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö DD/MM/YYYY'
                });
                return;
            }
            const startDate = convertThaiDateToGregorian(state.startDate);
            const endDate = convertThaiDateToGregorian(userMessage);
            if (endDate < startDate) {
                await client.replyMessage(event.replyToken, {
                    type: 'text',
                    text: '‚ùå ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô‡∏£‡∏ñ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏°‡πà'
                });
                return;
            }
            state.endDate = userMessage;
            state.step = 'startProvince';
            setUserState(userId, state);
            await client.replyMessage(event.replyToken, {
                type: 'text',
                text: 'üìç ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏£‡∏±‡∏ö‡∏£‡∏ñ'
            });
            break;
        }

        /*****************************************************
         * ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô: ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏£‡∏±‡∏ö‡∏£‡∏ñ (startProvince)
         *****************************************************/
        case 'startProvince': {
            console.log('Handling start province...');
            const quickMsg = await handleQuickReply("confirm");
            if (state.suggestedStartProvince) {
                if (userMessage === "‡πÉ‡∏ä‡πà") {
                    state.startProvince = state.suggestedStartProvince;
                    state.suggestedStartProvince = null;
                    state.step = 'endProvince';
                    setUserState(userId, state);
                    await client.replyMessage(event.replyToken, {
                        type: 'text',
                        text: `‚úÖ ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏£‡∏ñ‡∏Ñ‡∏∑‡∏≠ : "${state.startProvince}"\n\nüìç ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏£‡∏ñ`
                    });
                    return;
                } else if (userMessage === "‡πÑ‡∏°‡πà") {
                    state.suggestedStartProvince = null;
                    await client.replyMessage(event.replyToken, {
                        type: 'text',
                        text: 'üìç ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏£‡∏±‡∏ö‡∏£‡∏ñ‡πÉ‡∏´‡∏°‡πà'
                    });
                    return;
                }
            }
            const validationResult = await validateProvince(userMessage);
            console.log('Validation result (startProvince):', validationResult);
            if (!validationResult.valid) {
                if (!validationResult.suggestion) {
                    await client.replyMessage(event.replyToken, {
                        type: 'text',
                        text: '‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏°‡πà'
                    });
                } else {
                    state.suggestedStartProvince = validationResult.suggestion;
                    setUserState(userId, state);
                    await client.replyMessage(event.replyToken, {
                        type: 'text',
                        text: `‚ùì ‡∏ó‡πà‡∏≤‡∏ô‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î "${validationResult.suggestion}" ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`,
                        quickReply: quickMsg.quickReply
                    });
                }
                return;
            }
            state.startProvince = validationResult.province;
            state.step = 'endProvince';
            setUserState(userId, state);
            await client.replyMessage(event.replyToken, {
                type: 'text',
                text: `‚úÖ ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏£‡∏ñ‡∏Ñ‡∏∑‡∏≠ : "${state.startProvince}"\n\nüìç ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏£‡∏ñ`
            });
            break;
        }

        /*****************************************************
         * ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô: ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏£‡∏ñ (endProvince)
         *****************************************************/
        case 'endProvince': {
            console.log('Handling end province...');
            const quickMsg = await handleQuickReply("confirm");
            if (state.suggestedEndProvince) {
                if (userMessage === "‡πÉ‡∏ä‡πà") {
                    state.endProvince = state.suggestedEndProvince;
                    state.suggestedEndProvince = null;
                    state.step = 'confirm';
                    setUserState(userId, state);
                    const confirmQuick = await handleQuickReply("confirmBooking");
                    const summary = [
                        "üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á:",
                        `- ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•: ${state.firstName} ${state.lastName}`,
                        `- ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: ${state.phoneNumber}`,
                        `- ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${state.startDate} - ${state.endDate}`,
                        `- ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏£‡∏±‡∏ö‡∏£‡∏ñ: ${state.startProvince}`,
                        `- ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏Ñ‡∏∑‡∏ô‡∏£‡∏ñ: ${state.endProvince}`,
                        `- ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏ñ: ${state.carType}`,
                        `- ‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏£‡∏ñ: ${state.carBrand}`
                    ].join("\n");
                    await client.replyMessage(event.replyToken, {
                        type: 'text',
                        text: summary + "\n‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ‡∏´‡∏£‡∏∑‡∏≠ '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á",
                        quickReply: confirmQuick.quickReply
                    });
                    return;
                } else if (userMessage === "‡πÑ‡∏°‡πà") {
                    state.suggestedEndProvince = null;
                    await client.replyMessage(event.replyToken, {
                        type: 'text',
                        text: 'üìç ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏Ñ‡∏∑‡∏ô‡∏£‡∏ñ‡πÉ‡∏´‡∏°‡πà'
                    });
                    return;
                }
            }
            const validationResult = await validateProvince(userMessage);
            console.log('Validation result (endProvince):', validationResult);
            if (!validationResult.valid) {
                if (!validationResult.suggestion) {
                    await client.replyMessage(event.replyToken, {
                        type: 'text',
                        text: '‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏°‡πà'
                    });
                } else {
                    state.suggestedEndProvince = validationResult.suggestion;
                    setUserState(userId, state);
                    await client.replyMessage(event.replyToken, {
                        type: 'text',
                        text: `‚ùì ‡∏ó‡πà‡∏≤‡∏ô‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á "${validationResult.suggestion}" ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`,
                        quickReply: quickMsg.quickReply
                    });
                }
                return;
            }
            state.endProvince = validationResult.province;
            state.step = 'confirm';
            setUserState(userId, state);
            const confirmQuick = await handleQuickReply("confirmBooking");
            const summary = [
                "üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á:",
                `- ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•: ${state.firstName} ${state.lastName}`,
                `- ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: ${state.phoneNumber}`,
                `- ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${state.startDate} - ${state.endDate}`,
                `- ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏£‡∏±‡∏ö‡∏£‡∏ñ: ${state.startProvince}`,
                `- ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏Ñ‡∏∑‡∏ô‡∏£‡∏ñ: ${state.endProvince}`,
                `- ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏ñ: ${state.carType}`,
                `- ‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏£‡∏ñ: ${state.carBrand}`
            ].join("\n");

            await client.replyMessage(event.replyToken, {
                type: 'text',
                text: summary + "\n‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ‡∏´‡∏£‡∏∑‡∏≠ '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á",
                quickReply: confirmQuick.quickReply
            });
            break;
        }

        /*****************************************************
         * ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô: ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á (confirm)
         *****************************************************/
        case 'confirm': {
            console.log('Handling confirm...');
            console.log('Received userMessage:', userMessage);
            console.log('Current state:', state);
            if (userMessage === '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô') {
                console.log('‚û°Ô∏è Sending booking data to API:', {
                    userId,
                    firstName: state.firstName,
                    lastName: state.lastName,
                    phoneNumber: state.phoneNumber,
                    startDate: state.startDate,
                    endDate: state.endDate,
                    startProvince: state.startProvince,
                    endProvince: state.endProvince,
                    carType: state.carType,
                    carBrand: state.carBrand
                });
                const result = await saveBookingData(userId, state);
                if (result.success) {
                    clearUserState(userId);
                    await client.replyMessage(event.replyToken, {
                        type: 'text',
                        text: '‚úÖ ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'
                    });
                } else {
                    await client.replyMessage(event.replyToken, {
                        type: 'text',
                        text: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà'
                    });
                }
            } else if (userMessage === '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å') {
                clearUserState(userId);
                await client.replyMessage(event.replyToken, {
                    type: 'text',
                    text: 'üö´ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á'
                });
            } else {
                await client.replyMessage(event.replyToken, {
                    type: 'text',
                    text: '‚ùå ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"'
                });
            }
            break;
        }

        /*****************************************************
         * ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡πÉ‡∏î ‡πÜ
         *****************************************************/
        default:
            await client.replyMessage(event.replyToken, {
                type: 'text',
                text: '‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà'
            });
    }
}

module.exports = { handleBookingStep };
